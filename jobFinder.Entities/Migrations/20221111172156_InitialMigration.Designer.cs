// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using jobFinder.Entities;

#nullable disable

namespace jobFinder.Entities.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221111172156_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("jobFinder.Entities.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("jobFinder.Entities.Models.CV", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrivateInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillsInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserEmployeeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserEmployeeID");

                    b.ToTable("CVs", (string)null);
                });

            modelBuilder.Entity("jobFinder.Entities.Models.CVForVacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CVID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VacancyID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CVID");

                    b.HasIndex("VacancyID");

                    b.ToTable("CVForVacancies", (string)null);
                });

            modelBuilder.Entity("jobFinder.Entities.Models.EmploymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("employmentTypes", (string)null);
                });

            modelBuilder.Entity("jobFinder.Entities.Models.UserEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.ToTable("userEmployees", (string)null);
                });

            modelBuilder.Entity("jobFinder.Entities.Models.UserEmployer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.ToTable("userEmployers", (string)null);
                });

            modelBuilder.Entity("jobFinder.Entities.Models.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmploymentTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Experience")
                        .HasColumnType("float");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserEmployerID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.HasIndex("EmploymentTypeID");

                    b.HasIndex("UserEmployerID");

                    b.ToTable("vacancies", (string)null);
                });

            modelBuilder.Entity("jobFinder.Entities.Models.CV", b =>
                {
                    b.HasOne("jobFinder.Entities.Models.UserEmployee", "UserEmployee")
                        .WithMany("CVs")
                        .HasForeignKey("UserEmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEmployee");
                });

            modelBuilder.Entity("jobFinder.Entities.Models.CVForVacancy", b =>
                {
                    b.HasOne("jobFinder.Entities.Models.CV", "CV")
                        .WithMany("CVForVacancies")
                        .HasForeignKey("CVID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jobFinder.Entities.Models.Vacancy", "Vacancy")
                        .WithMany("CVForVacancies")
                        .HasForeignKey("VacancyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("jobFinder.Entities.Models.UserEmployee", b =>
                {
                    b.HasOne("jobFinder.Entities.Models.City", "City")
                        .WithMany("UserEmployees")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("jobFinder.Entities.Models.UserEmployer", b =>
                {
                    b.HasOne("jobFinder.Entities.Models.City", "City")
                        .WithMany("UserEmployers")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("jobFinder.Entities.Models.Vacancy", b =>
                {
                    b.HasOne("jobFinder.Entities.Models.City", "City")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jobFinder.Entities.Models.EmploymentType", "EmploymentType")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmploymentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jobFinder.Entities.Models.UserEmployer", "UserEmployer")
                        .WithMany("Vacancies")
                        .HasForeignKey("UserEmployerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("EmploymentType");

                    b.Navigation("UserEmployer");
                });

            modelBuilder.Entity("jobFinder.Entities.Models.City", b =>
                {
                    b.Navigation("UserEmployees");

                    b.Navigation("UserEmployers");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("jobFinder.Entities.Models.CV", b =>
                {
                    b.Navigation("CVForVacancies");
                });

            modelBuilder.Entity("jobFinder.Entities.Models.EmploymentType", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("jobFinder.Entities.Models.UserEmployee", b =>
                {
                    b.Navigation("CVs");
                });

            modelBuilder.Entity("jobFinder.Entities.Models.UserEmployer", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("jobFinder.Entities.Models.Vacancy", b =>
                {
                    b.Navigation("CVForVacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
